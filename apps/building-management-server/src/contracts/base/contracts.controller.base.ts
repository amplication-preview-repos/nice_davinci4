/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ContractsService } from "../contracts.service";
import { ContractsCreateInput } from "./ContractsCreateInput";
import { Contracts } from "./Contracts";
import { ContractsFindManyArgs } from "./ContractsFindManyArgs";
import { ContractsWhereUniqueInput } from "./ContractsWhereUniqueInput";
import { ContractsUpdateInput } from "./ContractsUpdateInput";

export class ContractsControllerBase {
  constructor(protected readonly service: ContractsService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Contracts })
  async createContracts(
    @common.Body() data: ContractsCreateInput
  ): Promise<Contracts> {
    return await this.service.createContracts({
      data: {
        ...data,

        rentHome: data.rentHome
          ? {
              connect: data.rentHome,
            }
          : undefined,

        resident: data.resident
          ? {
              connect: data.resident,
            }
          : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        contractNumber: true,
        startDate: true,
        endDate: true,

        rentHome: {
          select: {
            id: true,
          },
        },

        resident: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Contracts] })
  @ApiNestedQuery(ContractsFindManyArgs)
  async contractsItems(@common.Req() request: Request): Promise<Contracts[]> {
    const args = plainToClass(ContractsFindManyArgs, request.query);
    return this.service.contractsItems({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        contractNumber: true,
        startDate: true,
        endDate: true,

        rentHome: {
          select: {
            id: true,
          },
        },

        resident: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Contracts })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async contracts(
    @common.Param() params: ContractsWhereUniqueInput
  ): Promise<Contracts | null> {
    const result = await this.service.contracts({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        contractNumber: true,
        startDate: true,
        endDate: true,

        rentHome: {
          select: {
            id: true,
          },
        },

        resident: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Contracts })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateContracts(
    @common.Param() params: ContractsWhereUniqueInput,
    @common.Body() data: ContractsUpdateInput
  ): Promise<Contracts | null> {
    try {
      return await this.service.updateContracts({
        where: params,
        data: {
          ...data,

          rentHome: data.rentHome
            ? {
                connect: data.rentHome,
              }
            : undefined,

          resident: data.resident
            ? {
                connect: data.resident,
              }
            : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          contractNumber: true,
          startDate: true,
          endDate: true,

          rentHome: {
            select: {
              id: true,
            },
          },

          resident: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Contracts })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteContracts(
    @common.Param() params: ContractsWhereUniqueInput
  ): Promise<Contracts | null> {
    try {
      return await this.service.deleteContracts({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          contractNumber: true,
          startDate: true,
          endDate: true,

          rentHome: {
            select: {
              id: true,
            },
          },

          resident: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
