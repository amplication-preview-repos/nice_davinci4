/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Contracts } from "./Contracts";
import { ContractsCountArgs } from "./ContractsCountArgs";
import { ContractsFindManyArgs } from "./ContractsFindManyArgs";
import { ContractsFindUniqueArgs } from "./ContractsFindUniqueArgs";
import { CreateContractsArgs } from "./CreateContractsArgs";
import { UpdateContractsArgs } from "./UpdateContractsArgs";
import { DeleteContractsArgs } from "./DeleteContractsArgs";
import { RentHomes } from "../../rentHomes/base/RentHomes";
import { Residents } from "../../residents/base/Residents";
import { ContractsService } from "../contracts.service";
@graphql.Resolver(() => Contracts)
export class ContractsResolverBase {
  constructor(protected readonly service: ContractsService) {}

  async _contractsItemsMeta(
    @graphql.Args() args: ContractsCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Contracts])
  async contractsItems(
    @graphql.Args() args: ContractsFindManyArgs
  ): Promise<Contracts[]> {
    return this.service.contractsItems(args);
  }

  @graphql.Query(() => Contracts, { nullable: true })
  async contracts(
    @graphql.Args() args: ContractsFindUniqueArgs
  ): Promise<Contracts | null> {
    const result = await this.service.contracts(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Contracts)
  async createContracts(
    @graphql.Args() args: CreateContractsArgs
  ): Promise<Contracts> {
    return await this.service.createContracts({
      ...args,
      data: {
        ...args.data,

        rentHome: args.data.rentHome
          ? {
              connect: args.data.rentHome,
            }
          : undefined,

        resident: args.data.resident
          ? {
              connect: args.data.resident,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Contracts)
  async updateContracts(
    @graphql.Args() args: UpdateContractsArgs
  ): Promise<Contracts | null> {
    try {
      return await this.service.updateContracts({
        ...args,
        data: {
          ...args.data,

          rentHome: args.data.rentHome
            ? {
                connect: args.data.rentHome,
              }
            : undefined,

          resident: args.data.resident
            ? {
                connect: args.data.resident,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Contracts)
  async deleteContracts(
    @graphql.Args() args: DeleteContractsArgs
  ): Promise<Contracts | null> {
    try {
      return await this.service.deleteContracts(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => RentHomes, {
    nullable: true,
    name: "rentHome",
  })
  async getRentHome(
    @graphql.Parent() parent: Contracts
  ): Promise<RentHomes | null> {
    const result = await this.service.getRentHome(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Residents, {
    nullable: true,
    name: "resident",
  })
  async getResident(
    @graphql.Parent() parent: Contracts
  ): Promise<Residents | null> {
    const result = await this.service.getResident(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
