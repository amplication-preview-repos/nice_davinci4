/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Collaborators as PrismaCollaborators,
  Buildings as PrismaBuildings,
} from "@prisma/client";

export class CollaboratorsServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.CollaboratorsCountArgs, "select">
  ): Promise<number> {
    return this.prisma.collaborators.count(args);
  }

  async collaboratorsItems(
    args: Prisma.CollaboratorsFindManyArgs
  ): Promise<PrismaCollaborators[]> {
    return this.prisma.collaborators.findMany(args);
  }
  async collaborators(
    args: Prisma.CollaboratorsFindUniqueArgs
  ): Promise<PrismaCollaborators | null> {
    return this.prisma.collaborators.findUnique(args);
  }
  async createCollaborators(
    args: Prisma.CollaboratorsCreateArgs
  ): Promise<PrismaCollaborators> {
    return this.prisma.collaborators.create(args);
  }
  async updateCollaborators(
    args: Prisma.CollaboratorsUpdateArgs
  ): Promise<PrismaCollaborators> {
    return this.prisma.collaborators.update(args);
  }
  async deleteCollaborators(
    args: Prisma.CollaboratorsDeleteArgs
  ): Promise<PrismaCollaborators> {
    return this.prisma.collaborators.delete(args);
  }

  async getBuilding(parentId: string): Promise<PrismaBuildings | null> {
    return this.prisma.collaborators
      .findUnique({
        where: { id: parentId },
      })
      .building();
  }
}
