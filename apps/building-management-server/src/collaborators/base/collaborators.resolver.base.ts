/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Collaborators } from "./Collaborators";
import { CollaboratorsCountArgs } from "./CollaboratorsCountArgs";
import { CollaboratorsFindManyArgs } from "./CollaboratorsFindManyArgs";
import { CollaboratorsFindUniqueArgs } from "./CollaboratorsFindUniqueArgs";
import { CreateCollaboratorsArgs } from "./CreateCollaboratorsArgs";
import { UpdateCollaboratorsArgs } from "./UpdateCollaboratorsArgs";
import { DeleteCollaboratorsArgs } from "./DeleteCollaboratorsArgs";
import { Buildings } from "../../buildings/base/Buildings";
import { CollaboratorsService } from "../collaborators.service";
@graphql.Resolver(() => Collaborators)
export class CollaboratorsResolverBase {
  constructor(protected readonly service: CollaboratorsService) {}

  async _collaboratorsItemsMeta(
    @graphql.Args() args: CollaboratorsCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Collaborators])
  async collaboratorsItems(
    @graphql.Args() args: CollaboratorsFindManyArgs
  ): Promise<Collaborators[]> {
    return this.service.collaboratorsItems(args);
  }

  @graphql.Query(() => Collaborators, { nullable: true })
  async collaborators(
    @graphql.Args() args: CollaboratorsFindUniqueArgs
  ): Promise<Collaborators | null> {
    const result = await this.service.collaborators(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Collaborators)
  async createCollaborators(
    @graphql.Args() args: CreateCollaboratorsArgs
  ): Promise<Collaborators> {
    return await this.service.createCollaborators({
      ...args,
      data: {
        ...args.data,

        building: args.data.building
          ? {
              connect: args.data.building,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Collaborators)
  async updateCollaborators(
    @graphql.Args() args: UpdateCollaboratorsArgs
  ): Promise<Collaborators | null> {
    try {
      return await this.service.updateCollaborators({
        ...args,
        data: {
          ...args.data,

          building: args.data.building
            ? {
                connect: args.data.building,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Collaborators)
  async deleteCollaborators(
    @graphql.Args() args: DeleteCollaboratorsArgs
  ): Promise<Collaborators | null> {
    try {
      return await this.service.deleteCollaborators(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Buildings, {
    nullable: true,
    name: "building",
  })
  async getBuilding(
    @graphql.Parent() parent: Collaborators
  ): Promise<Buildings | null> {
    const result = await this.service.getBuilding(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
