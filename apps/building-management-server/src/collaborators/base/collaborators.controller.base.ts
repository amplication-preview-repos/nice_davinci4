/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { CollaboratorsService } from "../collaborators.service";
import { CollaboratorsCreateInput } from "./CollaboratorsCreateInput";
import { Collaborators } from "./Collaborators";
import { CollaboratorsFindManyArgs } from "./CollaboratorsFindManyArgs";
import { CollaboratorsWhereUniqueInput } from "./CollaboratorsWhereUniqueInput";
import { CollaboratorsUpdateInput } from "./CollaboratorsUpdateInput";

export class CollaboratorsControllerBase {
  constructor(protected readonly service: CollaboratorsService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Collaborators })
  async createCollaborators(
    @common.Body() data: CollaboratorsCreateInput
  ): Promise<Collaborators> {
    return await this.service.createCollaborators({
      data: {
        ...data,

        building: data.building
          ? {
              connect: data.building,
            }
          : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        role: true,
        email: true,

        building: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Collaborators] })
  @ApiNestedQuery(CollaboratorsFindManyArgs)
  async collaboratorsItems(
    @common.Req() request: Request
  ): Promise<Collaborators[]> {
    const args = plainToClass(CollaboratorsFindManyArgs, request.query);
    return this.service.collaboratorsItems({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        role: true,
        email: true,

        building: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Collaborators })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async collaborators(
    @common.Param() params: CollaboratorsWhereUniqueInput
  ): Promise<Collaborators | null> {
    const result = await this.service.collaborators({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        role: true,
        email: true,

        building: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Collaborators })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateCollaborators(
    @common.Param() params: CollaboratorsWhereUniqueInput,
    @common.Body() data: CollaboratorsUpdateInput
  ): Promise<Collaborators | null> {
    try {
      return await this.service.updateCollaborators({
        where: params,
        data: {
          ...data,

          building: data.building
            ? {
                connect: data.building,
              }
            : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          name: true,
          role: true,
          email: true,

          building: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Collaborators })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteCollaborators(
    @common.Param() params: CollaboratorsWhereUniqueInput
  ): Promise<Collaborators | null> {
    try {
      return await this.service.deleteCollaborators({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          name: true,
          role: true,
          email: true,

          building: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
