/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { RentHomesService } from "../rentHomes.service";
import { RentHomesCreateInput } from "./RentHomesCreateInput";
import { RentHomes } from "./RentHomes";
import { RentHomesFindManyArgs } from "./RentHomesFindManyArgs";
import { RentHomesWhereUniqueInput } from "./RentHomesWhereUniqueInput";
import { RentHomesUpdateInput } from "./RentHomesUpdateInput";
import { ContractsFindManyArgs } from "../../contracts/base/ContractsFindManyArgs";
import { Contracts } from "../../contracts/base/Contracts";
import { ContractsWhereUniqueInput } from "../../contracts/base/ContractsWhereUniqueInput";

export class RentHomesControllerBase {
  constructor(protected readonly service: RentHomesService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: RentHomes })
  async createRentHomes(
    @common.Body() data: RentHomesCreateInput
  ): Promise<RentHomes> {
    return await this.service.createRentHomes({
      data: {
        ...data,

        building: data.building
          ? {
              connect: data.building,
            }
          : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,

        building: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [RentHomes] })
  @ApiNestedQuery(RentHomesFindManyArgs)
  async rentHomesItems(@common.Req() request: Request): Promise<RentHomes[]> {
    const args = plainToClass(RentHomesFindManyArgs, request.query);
    return this.service.rentHomesItems({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,

        building: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: RentHomes })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async rentHomes(
    @common.Param() params: RentHomesWhereUniqueInput
  ): Promise<RentHomes | null> {
    const result = await this.service.rentHomes({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,

        building: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: RentHomes })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateRentHomes(
    @common.Param() params: RentHomesWhereUniqueInput,
    @common.Body() data: RentHomesUpdateInput
  ): Promise<RentHomes | null> {
    try {
      return await this.service.updateRentHomes({
        where: params,
        data: {
          ...data,

          building: data.building
            ? {
                connect: data.building,
              }
            : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          name: true,

          building: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: RentHomes })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteRentHomes(
    @common.Param() params: RentHomesWhereUniqueInput
  ): Promise<RentHomes | null> {
    try {
      return await this.service.deleteRentHomes({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          name: true,

          building: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/contractsItems")
  @ApiNestedQuery(ContractsFindManyArgs)
  async findContractsItems(
    @common.Req() request: Request,
    @common.Param() params: RentHomesWhereUniqueInput
  ): Promise<Contracts[]> {
    const query = plainToClass(ContractsFindManyArgs, request.query);
    const results = await this.service.findContractsItems(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        contractNumber: true,
        startDate: true,
        endDate: true,

        rentHome: {
          select: {
            id: true,
          },
        },

        resident: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/contractsItems")
  async connectContractsItems(
    @common.Param() params: RentHomesWhereUniqueInput,
    @common.Body() body: ContractsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      contractsItems: {
        connect: body,
      },
    };
    await this.service.updateRentHomes({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/contractsItems")
  async updateContractsItems(
    @common.Param() params: RentHomesWhereUniqueInput,
    @common.Body() body: ContractsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      contractsItems: {
        set: body,
      },
    };
    await this.service.updateRentHomes({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/contractsItems")
  async disconnectContractsItems(
    @common.Param() params: RentHomesWhereUniqueInput,
    @common.Body() body: ContractsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      contractsItems: {
        disconnect: body,
      },
    };
    await this.service.updateRentHomes({
      where: params,
      data,
      select: { id: true },
    });
  }
}
