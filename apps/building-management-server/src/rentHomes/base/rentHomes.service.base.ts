/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  RentHomes as PrismaRentHomes,
  Contracts as PrismaContracts,
  Buildings as PrismaBuildings,
} from "@prisma/client";

export class RentHomesServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.RentHomesCountArgs, "select">
  ): Promise<number> {
    return this.prisma.rentHomes.count(args);
  }

  async rentHomesItems(
    args: Prisma.RentHomesFindManyArgs
  ): Promise<PrismaRentHomes[]> {
    return this.prisma.rentHomes.findMany(args);
  }
  async rentHomes(
    args: Prisma.RentHomesFindUniqueArgs
  ): Promise<PrismaRentHomes | null> {
    return this.prisma.rentHomes.findUnique(args);
  }
  async createRentHomes(
    args: Prisma.RentHomesCreateArgs
  ): Promise<PrismaRentHomes> {
    return this.prisma.rentHomes.create(args);
  }
  async updateRentHomes(
    args: Prisma.RentHomesUpdateArgs
  ): Promise<PrismaRentHomes> {
    return this.prisma.rentHomes.update(args);
  }
  async deleteRentHomes(
    args: Prisma.RentHomesDeleteArgs
  ): Promise<PrismaRentHomes> {
    return this.prisma.rentHomes.delete(args);
  }

  async findContractsItems(
    parentId: string,
    args: Prisma.ContractsFindManyArgs
  ): Promise<PrismaContracts[]> {
    return this.prisma.rentHomes
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .contractsItems(args);
  }

  async getBuilding(parentId: string): Promise<PrismaBuildings | null> {
    return this.prisma.rentHomes
      .findUnique({
        where: { id: parentId },
      })
      .building();
  }
}
