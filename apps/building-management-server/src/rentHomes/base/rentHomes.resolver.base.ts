/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { RentHomes } from "./RentHomes";
import { RentHomesCountArgs } from "./RentHomesCountArgs";
import { RentHomesFindManyArgs } from "./RentHomesFindManyArgs";
import { RentHomesFindUniqueArgs } from "./RentHomesFindUniqueArgs";
import { CreateRentHomesArgs } from "./CreateRentHomesArgs";
import { UpdateRentHomesArgs } from "./UpdateRentHomesArgs";
import { DeleteRentHomesArgs } from "./DeleteRentHomesArgs";
import { ContractsFindManyArgs } from "../../contracts/base/ContractsFindManyArgs";
import { Contracts } from "../../contracts/base/Contracts";
import { Buildings } from "../../buildings/base/Buildings";
import { RentHomesService } from "../rentHomes.service";
@graphql.Resolver(() => RentHomes)
export class RentHomesResolverBase {
  constructor(protected readonly service: RentHomesService) {}

  async _rentHomesItemsMeta(
    @graphql.Args() args: RentHomesCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [RentHomes])
  async rentHomesItems(
    @graphql.Args() args: RentHomesFindManyArgs
  ): Promise<RentHomes[]> {
    return this.service.rentHomesItems(args);
  }

  @graphql.Query(() => RentHomes, { nullable: true })
  async rentHomes(
    @graphql.Args() args: RentHomesFindUniqueArgs
  ): Promise<RentHomes | null> {
    const result = await this.service.rentHomes(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => RentHomes)
  async createRentHomes(
    @graphql.Args() args: CreateRentHomesArgs
  ): Promise<RentHomes> {
    return await this.service.createRentHomes({
      ...args,
      data: {
        ...args.data,

        building: args.data.building
          ? {
              connect: args.data.building,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => RentHomes)
  async updateRentHomes(
    @graphql.Args() args: UpdateRentHomesArgs
  ): Promise<RentHomes | null> {
    try {
      return await this.service.updateRentHomes({
        ...args,
        data: {
          ...args.data,

          building: args.data.building
            ? {
                connect: args.data.building,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => RentHomes)
  async deleteRentHomes(
    @graphql.Args() args: DeleteRentHomesArgs
  ): Promise<RentHomes | null> {
    try {
      return await this.service.deleteRentHomes(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Contracts], { name: "contractsItems" })
  async findContractsItems(
    @graphql.Parent() parent: RentHomes,
    @graphql.Args() args: ContractsFindManyArgs
  ): Promise<Contracts[]> {
    const results = await this.service.findContractsItems(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => Buildings, {
    nullable: true,
    name: "building",
  })
  async getBuilding(
    @graphql.Parent() parent: RentHomes
  ): Promise<Buildings | null> {
    const result = await this.service.getBuilding(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
