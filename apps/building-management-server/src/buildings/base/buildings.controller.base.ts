/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { BuildingsService } from "../buildings.service";
import { BuildingsCreateInput } from "./BuildingsCreateInput";
import { Buildings } from "./Buildings";
import { BuildingsFindManyArgs } from "./BuildingsFindManyArgs";
import { BuildingsWhereUniqueInput } from "./BuildingsWhereUniqueInput";
import { BuildingsUpdateInput } from "./BuildingsUpdateInput";
import { CollaboratorsFindManyArgs } from "../../collaborators/base/CollaboratorsFindManyArgs";
import { Collaborators } from "../../collaborators/base/Collaborators";
import { CollaboratorsWhereUniqueInput } from "../../collaborators/base/CollaboratorsWhereUniqueInput";
import { RentHomesFindManyArgs } from "../../rentHomes/base/RentHomesFindManyArgs";
import { RentHomes } from "../../rentHomes/base/RentHomes";
import { RentHomesWhereUniqueInput } from "../../rentHomes/base/RentHomesWhereUniqueInput";

export class BuildingsControllerBase {
  constructor(protected readonly service: BuildingsService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Buildings })
  async createBuildings(
    @common.Body() data: BuildingsCreateInput
  ): Promise<Buildings> {
    return await this.service.createBuildings({
      data: {
        ...data,

        customer: data.customer
          ? {
              connect: data.customer,
            }
          : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        address: true,

        customer: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Buildings] })
  @ApiNestedQuery(BuildingsFindManyArgs)
  async buildingsItems(@common.Req() request: Request): Promise<Buildings[]> {
    const args = plainToClass(BuildingsFindManyArgs, request.query);
    return this.service.buildingsItems({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        address: true,

        customer: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Buildings })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async buildings(
    @common.Param() params: BuildingsWhereUniqueInput
  ): Promise<Buildings | null> {
    const result = await this.service.buildings({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        address: true,

        customer: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Buildings })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateBuildings(
    @common.Param() params: BuildingsWhereUniqueInput,
    @common.Body() data: BuildingsUpdateInput
  ): Promise<Buildings | null> {
    try {
      return await this.service.updateBuildings({
        where: params,
        data: {
          ...data,

          customer: data.customer
            ? {
                connect: data.customer,
              }
            : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          name: true,
          address: true,

          customer: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Buildings })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteBuildings(
    @common.Param() params: BuildingsWhereUniqueInput
  ): Promise<Buildings | null> {
    try {
      return await this.service.deleteBuildings({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          name: true,
          address: true,

          customer: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/collaboratorsItems")
  @ApiNestedQuery(CollaboratorsFindManyArgs)
  async findCollaboratorsItems(
    @common.Req() request: Request,
    @common.Param() params: BuildingsWhereUniqueInput
  ): Promise<Collaborators[]> {
    const query = plainToClass(CollaboratorsFindManyArgs, request.query);
    const results = await this.service.findCollaboratorsItems(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        role: true,
        email: true,

        building: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/collaboratorsItems")
  async connectCollaboratorsItems(
    @common.Param() params: BuildingsWhereUniqueInput,
    @common.Body() body: CollaboratorsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      collaboratorsItems: {
        connect: body,
      },
    };
    await this.service.updateBuildings({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/collaboratorsItems")
  async updateCollaboratorsItems(
    @common.Param() params: BuildingsWhereUniqueInput,
    @common.Body() body: CollaboratorsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      collaboratorsItems: {
        set: body,
      },
    };
    await this.service.updateBuildings({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/collaboratorsItems")
  async disconnectCollaboratorsItems(
    @common.Param() params: BuildingsWhereUniqueInput,
    @common.Body() body: CollaboratorsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      collaboratorsItems: {
        disconnect: body,
      },
    };
    await this.service.updateBuildings({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/rentHomesItems")
  @ApiNestedQuery(RentHomesFindManyArgs)
  async findRentHomesItems(
    @common.Req() request: Request,
    @common.Param() params: BuildingsWhereUniqueInput
  ): Promise<RentHomes[]> {
    const query = plainToClass(RentHomesFindManyArgs, request.query);
    const results = await this.service.findRentHomesItems(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,

        building: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/rentHomesItems")
  async connectRentHomesItems(
    @common.Param() params: BuildingsWhereUniqueInput,
    @common.Body() body: RentHomesWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      rentHomesItems: {
        connect: body,
      },
    };
    await this.service.updateBuildings({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/rentHomesItems")
  async updateRentHomesItems(
    @common.Param() params: BuildingsWhereUniqueInput,
    @common.Body() body: RentHomesWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      rentHomesItems: {
        set: body,
      },
    };
    await this.service.updateBuildings({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/rentHomesItems")
  async disconnectRentHomesItems(
    @common.Param() params: BuildingsWhereUniqueInput,
    @common.Body() body: RentHomesWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      rentHomesItems: {
        disconnect: body,
      },
    };
    await this.service.updateBuildings({
      where: params,
      data,
      select: { id: true },
    });
  }
}
