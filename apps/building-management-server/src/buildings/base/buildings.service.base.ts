/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Buildings as PrismaBuildings,
  Collaborators as PrismaCollaborators,
  RentHomes as PrismaRentHomes,
  Customers as PrismaCustomers,
} from "@prisma/client";

export class BuildingsServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.BuildingsCountArgs, "select">
  ): Promise<number> {
    return this.prisma.buildings.count(args);
  }

  async buildingsItems(
    args: Prisma.BuildingsFindManyArgs
  ): Promise<PrismaBuildings[]> {
    return this.prisma.buildings.findMany(args);
  }
  async buildings(
    args: Prisma.BuildingsFindUniqueArgs
  ): Promise<PrismaBuildings | null> {
    return this.prisma.buildings.findUnique(args);
  }
  async createBuildings(
    args: Prisma.BuildingsCreateArgs
  ): Promise<PrismaBuildings> {
    return this.prisma.buildings.create(args);
  }
  async updateBuildings(
    args: Prisma.BuildingsUpdateArgs
  ): Promise<PrismaBuildings> {
    return this.prisma.buildings.update(args);
  }
  async deleteBuildings(
    args: Prisma.BuildingsDeleteArgs
  ): Promise<PrismaBuildings> {
    return this.prisma.buildings.delete(args);
  }

  async findCollaboratorsItems(
    parentId: string,
    args: Prisma.CollaboratorsFindManyArgs
  ): Promise<PrismaCollaborators[]> {
    return this.prisma.buildings
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .collaboratorsItems(args);
  }

  async findRentHomesItems(
    parentId: string,
    args: Prisma.RentHomesFindManyArgs
  ): Promise<PrismaRentHomes[]> {
    return this.prisma.buildings
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .rentHomesItems(args);
  }

  async getCustomer(parentId: string): Promise<PrismaCustomers | null> {
    return this.prisma.buildings
      .findUnique({
        where: { id: parentId },
      })
      .customer();
  }
}
