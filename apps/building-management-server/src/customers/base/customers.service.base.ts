/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Customers as PrismaCustomers,
  Buildings as PrismaBuildings,
} from "@prisma/client";

export class CustomersServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.CustomersCountArgs, "select">
  ): Promise<number> {
    return this.prisma.customers.count(args);
  }

  async customersItems(
    args: Prisma.CustomersFindManyArgs
  ): Promise<PrismaCustomers[]> {
    return this.prisma.customers.findMany(args);
  }
  async customers(
    args: Prisma.CustomersFindUniqueArgs
  ): Promise<PrismaCustomers | null> {
    return this.prisma.customers.findUnique(args);
  }
  async createCustomers(
    args: Prisma.CustomersCreateArgs
  ): Promise<PrismaCustomers> {
    return this.prisma.customers.create(args);
  }
  async updateCustomers(
    args: Prisma.CustomersUpdateArgs
  ): Promise<PrismaCustomers> {
    return this.prisma.customers.update(args);
  }
  async deleteCustomers(
    args: Prisma.CustomersDeleteArgs
  ): Promise<PrismaCustomers> {
    return this.prisma.customers.delete(args);
  }

  async findBuildingsItems(
    parentId: string,
    args: Prisma.BuildingsFindManyArgs
  ): Promise<PrismaBuildings[]> {
    return this.prisma.customers
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .buildingsItems(args);
  }
}
