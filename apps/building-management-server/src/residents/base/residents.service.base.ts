/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Residents as PrismaResidents,
  Contracts as PrismaContracts,
} from "@prisma/client";

export class ResidentsServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ResidentsCountArgs, "select">
  ): Promise<number> {
    return this.prisma.residents.count(args);
  }

  async residentsItems(
    args: Prisma.ResidentsFindManyArgs
  ): Promise<PrismaResidents[]> {
    return this.prisma.residents.findMany(args);
  }
  async residents(
    args: Prisma.ResidentsFindUniqueArgs
  ): Promise<PrismaResidents | null> {
    return this.prisma.residents.findUnique(args);
  }
  async createResidents(
    args: Prisma.ResidentsCreateArgs
  ): Promise<PrismaResidents> {
    return this.prisma.residents.create(args);
  }
  async updateResidents(
    args: Prisma.ResidentsUpdateArgs
  ): Promise<PrismaResidents> {
    return this.prisma.residents.update(args);
  }
  async deleteResidents(
    args: Prisma.ResidentsDeleteArgs
  ): Promise<PrismaResidents> {
    return this.prisma.residents.delete(args);
  }

  async findContractsItems(
    parentId: string,
    args: Prisma.ContractsFindManyArgs
  ): Promise<PrismaContracts[]> {
    return this.prisma.residents
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .contractsItems(args);
  }
}
